#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const logger = require("../logger");
const http = require("http");
const websocket = require("ws");
const gameController = require("../gameController");
const communication = require("../communication");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

var host = process.env.HOST || "localhost";
app.set("host", host);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var ws_server = new websocket.Server({ server });

let connectionId = 0;
ws_server.on("connection", (ws) => {
    const conn = ws;
    conn.id = connectionId++;

    gameController.ConnectionManager.addConnection(conn);

    logger.verbose(`New connection: ${conn.id}`);

    conn.on("message", (message) => {
        logger.debug(`Message received: ${message}`);
        communication.handleMessage(conn, message);
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, host);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ?
        "Pipe " + port :
        "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            logger.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            logger.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ?
        "pipe " + addr :
        "port " + addr.port;
    logger.info("Listening on " + bind);
}